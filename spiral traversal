#include <iostream>
using namespace std;
struct node {
	int data;
	struct node* left;
	struct node* right;
};


void printLevel(struct node* root, int level, int ltr);
int height(struct node* node);
struct node* newNode(int data);


void printSpiral(struct node* root)
{
	int h = height(root);
	int i;
	bool ltr = false;
	for (i = 1; i <= h; i++) {
		printLevel(root, i, ltr);
		ltr = !ltr;
	}
}
void printLevel(struct node* root, int level, int ltr)
{
	if (root == NULL)
		return;
	if (level == 1)
		cout << root->data << " ";

	else if (level > 1) {
		if (ltr) {
			printLevel(root->left, level - 1, ltr);
			printLevel(root->right, level - 1, ltr);
		}
		else {
			printLevel(root->right, level - 1, ltr);
			printLevel(root->left, level - 1, ltr);
		}
	}
}

int height(struct node* node)
{
	if (node == NULL)
		return 0;
	else {

		
		int lheight = height(node->left);
		int rheight = height(node->right);

		if (lheight > rheight)
			return (lheight + 1);
		else
			return (rheight + 1);
	}
}

struct node* newNode(int data)
{
	node* newnode = new node();
	newnode->data = data;
	newnode->left = NULL;
	newnode->right = NULL;

	return (newnode);
}

int main()
{
	struct node* root = newNode(100);
	root->left = newNode(70);
	root->right = newNode(110);
	root->left->left = newNode(65);
	root->left->right = newNode(90);
	root->right->left = newNode(105);
	root->left->left->left = newNode(60);
	root->left->right->left=newNode(85);
	root->left->right->right=newNode(95);
	root->left->right->left->right=newNode(80);


	printSpiral(root);

	return 0;
}
